{
    // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Google Test Template": {
        "prefix": "gtest",
        "body": [
            "#include <hitagi/utils/test.hpp>",
            "",
            "using namespace testing;",
            "",
            "$1",
            "",
            "int main(int argc, char** argv) {",
            "    InitGoogleTest(&argc, argv);",
            "    return RUN_ALL_TESTS();",
            "}"
        ]
    },
    "Google Unit Test": {
        "prefix": "gut",
        "body": [
            "TEST(${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}, ${2:Case}) {",
            "    ${3:/* code */}",
            "}",
        ]
    },
    "Google Unit Test Fixtures Class": {
        "prefix": "gutfc",
        "body": [
            "class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} : public Test {",
            "protected:",
            "    ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}() {",
            "        ${3:/* Init here */}",
            "    }",
            "",
            "    ~${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}() {",
            "    }",
            "    ${2:/* data */}",
            "};",
            "",
        ]
    },
    "Google Unit Test Fixtures": {
        "prefix": "gutf",
        "body": [
            "TEST_F(${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}, ${2:Case}) {",
            "    ${3:/* code */}",
            "}",
        ]
    },
    "Google Unit Value-Parameterized Class": {
        "prefix": "gutpc",
        "body": [
            "class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} : public TestWithParam<${2:Param}> {",
            "protected:",
            "    ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}() {",
            "        ${4:/* Init here */}",
            "    }",
            "",
            "    ~${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}() {",
            "    }",
            "    ${3:/* data */}",
            "};",
            "",
        ]
    },
    "Google Unit Value-Parameterized Test": {
        "prefix": "gutp",
        "body": [
            "TEST_P(${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}, ${2:Case}) {",
            "    ${3:/* code */}",
            "}",
        ]
    },
    "Google Mock": {
        "prefix": "gm",
        "body": [
            "#include <gmock/gmock.h>",
            "",
            "class Mock${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} : public ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} {",
            "public:",
            "    MOCK_METHOD(${2})",
            "}"
        ]
    },
    "Benchmark": {
        "prefix": "bm",
        "body": [
            "#include <hitagi/utils/test.hpp>",
            "",
            "static void BM_${1:SomeFunction}(benchmark::State& state) {",
            "    // Perform setup here",
            "    for (auto _ : state) {",
            "      // This code gets timed",
            "      ${2}",
            "    }",
            "}",
            "// Register the function as a benchmark",
            "BENCHMARK(BM_${1:SomeFunction});",
            "// Run the benchmark",
            "BENCHMARK_MAIN();"
        ]
    }
}